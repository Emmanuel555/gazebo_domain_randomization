#!/usr/bin/env python
import copy
import numpy as np
import rospy
from gazebo_msgs.srv import GetPhysicsProperties
from gazebo_msgs.srv import SetPhysicsProperties, SetPhysicsPropertiesRequest

class PhysicsPropertiesRandomizer:
    def __init__(self, gravity_ratio_range, gazebo_ns='/gazebo'):
        self._gravity_ratio_range = gravity_ratio_range
        rospy.wait_for_service(gazebo_ns + '/get_physics_properties')
        get_phys_prop = rospy.ServiceProxy(gazebo_ns + '/get_physics_properties', GetPhysicsProperties)
        try:
	    res = get_phys_prop()
            if not res.success:
	        rospy.logwarn(res.status_message)
        except rospy.ServiceException, e:
            rospy.logerr("Service call failed: %s" % e)
        self._default_props = res
        self._set_phys_prop = rospy.ServiceProxy(gazebo_ns + '/set_physics_properties', SetPhysicsProperties)
    def callback(self, event):
        req = SetPhysicsPropertiesRequest()
        r_gravity = np.random.uniform(*self._gravity_ratio_range)
        req.time_step = self._default_props.time_step
        req.max_update_rate = self._default_props.max_update_rate
        req.gravity = copy.deepcopy(self._default_props.gravity)
        req.gravity.z *= r_gravity
        req.ode_config = copy.deepcopy(self._default_props.ode_config)
        try:
            res = self._set_phys_prop(req)
            if not res.success:
                rospy.logwarn(res.status_message)
        except rospy.ServiceException, e:
            rospy.logerr("Service call failed: %s" % e)

if __name__ == "__main__":
    import argparse
    from std_msgs.msg import Empty
    parser = argparse.ArgumentParser(description='Physics properties randomizer')
    parser.add_argument('-d', '--duration', type=float, default=1.0, help='Timer duration.')
    parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
    args = parser.parse_args(rospy.myargv()[1:])

    rospy.init_node("physics_properties_randomizer")
    gravity_ratio_range = rospy.get_param("~gravity_ratio_range", {'min': 0.8, 'max': 1.2})
    rospy.loginfo("Load param gravity_ratio_range: " + str(gravity_ratio_range))
    randomizer = PhysicsPropertiesRandomizer([gravity_ratio_range['min'], gravity_ratio_range['max']])
    if args.event_mode == 'timer':
        rospy.Timer(rospy.Duration(args.duration), randomizer.callback)
    elif args.event_mode == 'trigger':
        rospy.Subscriber('randomizer/trigger', Empty, randomizer.callback)
    else:
        raise ValueError('Unknown event_mode: %s' % args.event_mode)
    rospy.spin()
