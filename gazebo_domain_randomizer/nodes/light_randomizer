#!/usr/bin/env python
import numpy as np
import rospy
from std_msgs.msg import ColorRGBA
from gazebo_msgs.srv import SetLightProperties, SetLightPropertiesRequest

class LightRandomizer:
    def __init__(self, light_name='sun', gazebo_ns='/gazebo'):
        rospy.init_node("light_randomizer")
        self._light_name = light_name
        self._set_light = rospy.ServiceProxy(gazebo_ns + '/set_light_properties', SetLightProperties)
    def callback(self, event):
        req = SetLightPropertiesRequest()
        req.light_name = self._light_name
        req.diffuse = ColorRGBA(*np.random.random(4))
        req.attenuation_constant = np.random.random()
        req.attenuation_linear = np.random.random()
        req.attenuation_quadratic = np.random.random()
        rospy.logdebug("Set light parameter: " + str(req))
        try:
            res = self._set_light(req)
            if not res.success:
                rospy.logwarn(res.status_message)
        except rospy.ServiceException, e:
            rospy.logerr("Service call failed: %s" % e)

if __name__ == "__main__":
    import argparse
    from std_msgs.msg import Empty
    parser = argparse.ArgumentParser(description='Light randomizer')
    parser.add_argument('-d', '--duration', type=float, default=1.0, help='Timer duration.')
    parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
    args = parser.parse_args(rospy.myargv()[1:])
    randomizer = LightRandomizer()
    if args.event_mode == 'timer':
        rospy.Timer(rospy.Duration(args.duration), randomizer.callback)
    elif args.event_mode == 'trigger':
        rospy.Subscriber('randomizer/trigger', Empty, randomizer.callback)
    else:
        raise ValueError('Unknown event_mode: %s' % args.event_mode)
    rospy.spin()
